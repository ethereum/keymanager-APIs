openapi: "3.0.3"

info:
  title: "Eth2 key manager API"
  description: |
    API specification for a key manager client, which enables users to manage keystores.

    The key manager API is served by the binary holding the validator keys. This binary may be a remote signer or a validator client.

    All routes SHOULD be exposed through a secure channel, such as with HTTPs, an SSH tunnel, a VPN, etc.

    All requests by default send and receive JSON, and as such should have either or both of the "Content-Type: application/json"
    and "Accept: application/json" headers.

    All sensitive routes are to be authenticated with a token. This token should be provided by the user via a secure channel:
      - Log the token to stdout when running the binary with the key manager API enabled
      - Read the token from a file available to the binary
  version: "v1.0.0-alpha"
  contact:
    name: Ethereum Github
    url: https://github.com/ethereum/keymanager-APIs/issues
  license:
    name: "Creative Commons Zero v1.0 Universal"
    url: "https://creativecommons.org/publicdomain/zero/1.0/"

servers:
  - url: "{server_url}"
    variables:
      server_url:
        description: "key manager API url"
        default: "https://public-mainnet-node.ethereum.org"

tags:
  - name: Keymanager
    description: Set of endpoints for key management.

paths:
  /eth/v1/keystores:
    get:
      operationId: ListKeys
      summary: List Keys.
      description: |
        List all validating pubkeys known to and decrypted by this keymanager binary
      security:
        - bearerAuth: []
      tags:
        - Keymanager
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                title: ListKeysResponse
                type: object
                required: [data]
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      required: [validating_pubkey]
                      properties:
                        validating_pubkey:
                          $ref: "#/components/schemas/Pubkey"
                        derivation_path:
                          type: string
                          description: The derivation path (if present in the imported keystore).
                          example: "m/12381/3600/0/0/0"
                        readonly:
                          type: boolean
                          description: The key associated with this pubkey cannot be deleted from the API
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalError"

    post:
      operationId: ImportKeystores
      summary: Import Keystores.
      description: |
        Import keystores generated by the Eth2.0 deposit CLI tooling. `passwords[i]` must unlock `keystores[i]`.

        Users SHOULD send slashing_protection data associated with the imported pubkeys. MUST follow the format defined in
        EIP-3076: Slashing Protection Interchange Format.
      security:
        - bearerAuth: []
      tags:
        - Keymanager
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [keystores, passwords]
              properties:
                keystores:
                  type: array
                  description: JSON-encoded keystore files generated with the Launchpad.
                  items:
                    $ref: "#/components/schemas/Keystore"
                passwords:
                  type: array
                  description: Passwords to unlock imported keystore files. `passwords[i]` must unlock `keystores[i]`.
                  items:
                    type: string
                    example: "ABCDEFGH01234567ABCDEFGH01234567"
                slashing_protection:
                  $ref: "#/components/schemas/SlashingProtectionData"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                title: ImportKeystoresResponse
                type: object
                required: [data]
                properties:
                  data:
                    type: array
                    description: Status result of each `request.keystores` with same length and order of `request.keystores`
                    items:
                      type: object
                      required: [status]
                      properties:
                        status:
                          type: string
                          description: |
                            - imported: Keystore successfully decrypted and imported to keymanager permanent storage
                            - duplicate: Keystore's pubkey is already known to the keymanager
                            - error: Any other status different to the above: decrypting error, I/O errors, etc.
                          enum:
                            - imported
                            - duplicate
                            - error
                          example: imported
                        message:
                          type: string
                          description: error message if status == error
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalError"

    delete:
      operationId: DeleteKeys
      summary: Delete Keys.
      description: |
        DELETE must delete all keys from `request.pubkeys` that are known to the keymanager and exist in its
        persistent storage. Additionally, DELETE must fetch the slashing protection data for the requested keys from
        persistent storage, which must be retained (and not deleted) after the response has been sent. Therefore in the
        case of two identical delete requests being made, both will have access to slashing protection data.

        In a single atomic sequential operation the keymanager must:
        1. Guarantee that key(s) can not produce any more signature; only then
        2. Delete key(s) and serialize its associated slashing protection data

        DELETE should never return a 404 response, even if all pubkeys from request.pubkeys have no extant keystores
        nor slashing protection data.

        Slashing protection data must only be returned for keys from `request.pubkeys` for which a
        `deleted` or `not_active` status is returned.
      security:
        - bearerAuth: []
      tags:
        - Keymanager
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [pubkeys]
              properties:
                pubkeys:
                  type: array
                  description: List of public keys to delete.
                  items:
                    $ref: "#/components/schemas/Pubkey"
      responses:
        "200":
          description: Success response
          content:
            application/json:
              schema:
                title: DeleteKeysResponse
                type: object
                required: [data, slashing_protection]
                properties:
                  data:
                    type: array
                    description: Deletion status of all keys in `request.pubkeys` in the same order.
                    items:
                      type: object
                      required: [status]
                      properties:
                        status:
                          type: string
                          description: |
                            - deleted: key was active and removed
                            - not_active: slashing protection data returned but key was not active
                            - not_found: key was not found to be removed, and no slashing data can be returned
                            - error: unexpected condition meant the key could not be removed (the key was actually found, but we couldn't stop using it) - this would be a sign that making it active elsewhere would almost certainly cause you headaches / slashing conditions etc.
                          enum:
                            - deleted
                            - not_active
                            - not_found
                            - error
                          example: deleted
                        message:
                          type: string
                          description: error message if status == error
                  slashing_protection:
                    $ref: "#/components/schemas/SlashingProtectionData"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalError"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: URL safe token, optionally JWT

  schemas:
    Pubkey:
      type: string
      pattern: "^0x[a-fA-F0-9]{96}$"
      description: |
        The validator's BLS public key, uniquely identifying them. _48-bytes, hex encoded with 0x prefix, case insensitive._
      example: "0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a"

    Keystore:
      type: string
      description: |
        JSON serialized representation of a single keystore in EIP-2335: BLS12-381 Keystore format.
      example: '{"version":4,"uuid":"9f75a3fa-1e5a-49f9-be3d-f5a19779c6fa","path":"m/12381/3600/0/0/0","pubkey":"0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a","crypto":{"kdf":{"function":"pbkdf2","params":{"dklen":32,"c":262144,"prf":"hmac-sha256","salt":"8ff8f22ef522a40f99c6ce07fdcfc1db489d54dfbc6ec35613edf5d836fa1407"},"message":""},"checksum":{"function":"sha256","params":{},"message":"9678a69833d2576e3461dd5fa80f6ac73935ae30d69d07659a709b3cd3eddbe3"},"cipher":{"function":"aes-128-ctr","params":{"iv":"31b69f0ac97261e44141b26aa0da693f"},"message":"e8228bafec4fcbaca3b827e586daad381d53339155b034e5eaae676b715ab05e"}}}'

    SlashingProtectionData:
      type: string
      description: |
        JSON serialized representation of the slash protection data in format defined in EIP-3076: Slashing Protection Interchange Format.
      example: '{"metadata":{"interchange_format_version":"5","genesis_validators_root":"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2"},"data":[{"pubkey":"0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a","signed_blocks":[],"signed_attestations":[]}]}'

    ErrorResponse:
      type: object
      required: [message]
      properties:
        message:
          description: "Detailed error message"
          type: string
          example: "description of the error that occurred"

  responses:
    BadRequest:
      description: "Bad request. Request was malformed and could not be processed"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

    Unauthorized:
      description: "Unauthorized, no token is found"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

    Forbidden:
      description: "Forbidden, a token is found but is invalid"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

    InternalError:
      description: "Internal server error. The server encountered an unexpected error indicative of
                    a serious fault in the system, or a bug."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
