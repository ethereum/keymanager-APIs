openapi: "3.0.3"

info:
  title: "Eth2 key manager API"
  description: |
    API specification for a key manager client, which enables users to manage keystores.

    The key manager API is served by the binary holding the validator keys. This binary may be a remote signer or a validator client.

    All routes SHOULD be exposed through a secure channel, such as with HTTPs, an SSH tunnel, a VPN, etc.

    All requests by default send and receive JSON, and as such should have either or both of the "Content-Type: application/json"
    and "Accept: application/json" headers.

    All sensitive routes are to be authenticated with a token. This token should be provided by the user via a secure channel:
      - Log the token to stdout when running the binary with the key manager API enabled
      - Read the token from a file available to the binary
  version: "v1.0.0"
  contact:
    name: Ethereum Github
    url: https://github.com/ethereum/keymanager-APIs/issues
  license:
    name: "Creative Commons Zero v1.0 Universal"
    url: "https://creativecommons.org/publicdomain/zero/1.0/"

servers:
  - url: "{server_url}"
    variables:
      server_url:
        description: "key manager API url"
        default: "https://public-mainnet-node.ethereum.org"

tags:
  - name: Fee Recipient
    description: Set of endpoints for management of fee recipient.
  - name: Gas Limit
    description: Set of endpoints for management of gas limits.
  - name: Graffiti
    description: Set of endpoints for management of graffiti.
  - name: Local Key Manager
    description: Set of endpoints for key management of local keys.
  - name: Remote Key Manager
    description: Set of endpoints for key management of external keys.
  - name: Voluntary Exit
    description: Set of endpoints for voluntary exits.

paths:
  /eth/v1/keystores:
    $ref:  './apis/local_keystores.yaml'
  /eth/v1/remotekeys:
    $ref:  './apis/remote_keystores.yaml'
  /eth/v1/validator/{pubkey}/feerecipient:
    $ref:  './apis/fee_recipient.yaml'
  /eth/v1/validator/{pubkey}/gas_limit:
    $ref:  './apis/gas_limit.yaml'
  /eth/v1/validator/{pubkey}/graffiti:
    $ref:  './apis/graffiti.yaml'
  /eth/v1/validator/{pubkey}/voluntary_exit:
    $ref: './apis/voluntary_exit.yaml'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: URL safe token, optionally JWT

  schemas:
    Pubkey:
      $ref: './types/public_key.yaml'
    EthAddress:
      $ref: './types/eth_address.yaml'
    Keystore:
      $ref: './types/keystore.yaml'
    FeeRecipient:
      $ref: './types/fee_recipient.yaml'
    GasLimit:
      $ref: './types/gas_limit.yaml'
    Graffiti:
      $ref: './types/graffiti.yaml'
    Uint64:
      $ref: './types/uint.yaml#/Uint64'
    SignerDefinition:
      $ref: './types/signer_definition.yaml'
    ImportRemoteSignerDefinition:
      $ref: './types/import_remote_signer_definition.yaml'
    SlashingProtectionData:
      $ref: './types/slashing_protection.yaml'
    ErrorResponse:
      $ref: './types/error_response.yaml'
    SignedVoluntaryExit:
      $ref: './types/voluntary_exit.yaml#/SignedVoluntaryExit'

  responses:
    BadRequest:
      description: "Bad request. Request was malformed and could not be processed"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    Unauthorized:
      description: "Unauthorized, no token is found"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    Forbidden:
      description: "Forbidden, a token is found but is invalid"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    NotFound:
      description: "Path not found"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    InternalError:
      description: |
        Internal server error. The server encountered an unexpected error indicative of
        a serious fault in the system, or a bug.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
